
master v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000998  00000a2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000998  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000262  00800102  00800102  00000a2e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a2e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000a9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152a  00000000  00000000  00000bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b33  00000000  00000000  000020de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d04  00000000  00000000  00002c11  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003918  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058d  00000000  00000000  00003c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e56  00000000  00000000  00004219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000506f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_18>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	cc 00       	.word	0x00cc	; ????
  6a:	ce 00       	.word	0x00ce	; ????
  6c:	d0 00       	.word	0x00d0	; ????
  6e:	d2 00       	.word	0x00d2	; ????
  70:	d4 00       	.word	0x00d4	; ????
  72:	d6 00       	.word	0x00d6	; ????
  74:	d8 00       	.word	0x00d8	; ????
  76:	da 00       	.word	0x00da	; ????
  78:	dc 00       	.word	0x00dc	; ????
  7a:	de 00       	.word	0x00de	; ????

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d4 e0       	ldi	r29, 0x04	; 4
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e8 e9       	ldi	r30, 0x98	; 152
  90:	f9 e0       	ldi	r31, 0x09	; 9
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 30       	cpi	r26, 0x02	; 2
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	23 e0       	ldi	r18, 0x03	; 3
  a0:	a2 e0       	ldi	r26, 0x02	; 2
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a4 36       	cpi	r26, 0x64	; 100
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 5d 00 	call	0xba	; 0xba <main>
  b2:	0c 94 ca 04 	jmp	0x994	; 0x994 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <main>:
//		COMMAND_ALL_OFF						Silence everything
//

int main(void)
{	
    uart_init();
  ba:	0e 94 c4 03 	call	0x788	; 0x788 <uart_init>
	tonectl_init();
  be:	0e 94 5f 01 	call	0x2be	; 0x2be <tonectl_init>
	com_init();
  c2:	0e 94 fd 00 	call	0x1fa	; 0x1fa <com_init>
	
	uint8_t kommando = COMMAND_NONE;
	uint8_t kommando_data = 0xFF;
  c6:	df ef       	ldi	r29, 0xFF	; 255
{	
    uart_init();
	tonectl_init();
	com_init();
	
	uint8_t kommando = COMMAND_NONE;
  c8:	c0 e0       	ldi	r28, 0x00	; 0
				}
				else if(data == COMMAND_REGROUP)
				{
					regroup();
				}
				kommando = COMMAND_NONE;
  ca:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if((data&0xF0) == COMMAND_NOTE_ON || (data&0xF0) == COMMAND_NOTE_OFF)
			{
				// Receiving command
				kommando = data;
				kommando_data = 0xFF;
  cc:	0f ef       	ldi	r16, 0xFF	; 255
  ce:	08 c0       	rjmp	.+16     	; 0xe0 <main+0x26>
				// Receiving data for an incoming command
				//
				if((kommando&0xF0) == COMMAND_NOTE_ON)
				{
					if(kommando_data == 0xFF)
						kommando_data = data;
  d0:	d8 2f       	mov	r29, r24
  d2:	06 c0       	rjmp	.+12     	; 0xe0 <main+0x26>
					}
				}
				else if((kommando&0xF0) == COMMAND_TUNE_CHANNEL)
				{
					if(kommando_data == 0xFF)
						kommando_data = data;
  d4:	d8 2f       	mov	r29, r24
  d6:	04 c0       	rjmp	.+8      	; 0xe0 <main+0x26>
				}
			}
			else if((data&0xF0) == COMMAND_NOTE_ON || (data&0xF0) == COMMAND_NOTE_OFF)
			{
				// Receiving command
				kommando = data;
  d8:	c8 2f       	mov	r28, r24
				kommando_data = 0xFF;
  da:	d0 2f       	mov	r29, r16
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <main+0x26>
				}
				else if(data == COMMAND_REGROUP)
				{
					regroup();
				}
				kommando = COMMAND_NONE;
  de:	c1 2f       	mov	r28, r17
	uint8_t kommando = COMMAND_NONE;
	uint8_t kommando_data = 0xFF;
	
    while (1)
    {	
		if(tilgjengelig())
  e0:	0e 94 47 04 	call	0x88e	; 0x88e <tilgjengelig>
  e4:	88 23       	and	r24, r24
  e6:	09 f4       	brne	.+2      	; 0xea <main+0x30>
  e8:	45 c0       	rjmp	.+138    	; 0x174 <main+0xba>
		{
			uint8_t data = motta();
  ea:	0e 94 76 04 	call	0x8ec	; 0x8ec <motta>
			
			if(!(data&0x80) && kommando != COMMAND_NONE)
  ee:	88 23       	and	r24, r24
  f0:	2c f1       	brlt	.+74     	; 0x13c <main+0x82>
  f2:	cc 23       	and	r28, r28
  f4:	19 f1       	breq	.+70     	; 0x13c <main+0x82>
  f6:	9c 2f       	mov	r25, r28
  f8:	90 7f       	andi	r25, 0xF0	; 240
			{
				//
				// Receiving data for an incoming command
				//
				if((kommando&0xF0) == COMMAND_NOTE_ON)
  fa:	90 39       	cpi	r25, 0x90	; 144
  fc:	59 f4       	brne	.+22     	; 0x114 <main+0x5a>
				{
					if(kommando_data == 0xFF)
  fe:	df 3f       	cpi	r29, 0xFF	; 255
 100:	39 f3       	breq	.-50     	; 0xd0 <main+0x16>
						kommando_data = data;
					else
					{
						spilltone(kommando_data, kommando&0x0F, data);
 102:	6c 2f       	mov	r22, r28
 104:	6f 70       	andi	r22, 0x0F	; 15
 106:	48 2f       	mov	r20, r24
 108:	8d 2f       	mov	r24, r29
 10a:	0e 94 33 02 	call	0x466	; 0x466 <spilltone>
						kommando = COMMAND_NONE;
						kommando_data = 0xFF;
 10e:	d0 2f       	mov	r29, r16
					if(kommando_data == 0xFF)
						kommando_data = data;
					else
					{
						spilltone(kommando_data, kommando&0x0F, data);
						kommando = COMMAND_NONE;
 110:	c1 2f       	mov	r28, r17
 112:	e6 cf       	rjmp	.-52     	; 0xe0 <main+0x26>
						kommando_data = 0xFF;
					}
				}
				else if((kommando&0xF0) == COMMAND_TUNE_CHANNEL)
 114:	90 3a       	cpi	r25, 0xA0	; 160
 116:	51 f4       	brne	.+20     	; 0x12c <main+0x72>
				{
					if(kommando_data == 0xFF)
 118:	df 3f       	cpi	r29, 0xFF	; 255
 11a:	e1 f2       	breq	.-72     	; 0xd4 <main+0x1a>
						kommando_data = data;
					else
					{
						offsettone(kommando_data, data, kommando&0x0F);
 11c:	4c 2f       	mov	r20, r28
 11e:	4f 70       	andi	r20, 0x0F	; 15
 120:	68 2f       	mov	r22, r24
 122:	8d 2f       	mov	r24, r29
 124:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <offsettone>
						kommando = COMMAND_NONE;
 128:	c1 2f       	mov	r28, r17
 12a:	da cf       	rjmp	.-76     	; 0xe0 <main+0x26>
					}
				}
				else if((kommando&0xF0) == COMMAND_NOTE_OFF)
 12c:	90 38       	cpi	r25, 0x80	; 128
 12e:	c1 f6       	brne	.-80     	; 0xe0 <main+0x26>
				{
					stopptone(data, kommando&0x0F);
 130:	6c 2f       	mov	r22, r28
 132:	6f 70       	andi	r22, 0x0F	; 15
 134:	0e 94 76 03 	call	0x6ec	; 0x6ec <stopptone>
					kommando = COMMAND_NONE;
 138:	c1 2f       	mov	r28, r17
 13a:	d2 cf       	rjmp	.-92     	; 0xe0 <main+0x26>
				}
			}
			else if((data&0xF0) == COMMAND_NOTE_ON || (data&0xF0) == COMMAND_NOTE_OFF)
 13c:	98 2f       	mov	r25, r24
 13e:	90 7e       	andi	r25, 0xE0	; 224
 140:	90 38       	cpi	r25, 0x80	; 128
 142:	51 f2       	breq	.-108    	; 0xd8 <main+0x1e>
 144:	98 2f       	mov	r25, r24
 146:	90 7f       	andi	r25, 0xF0	; 240
			{
				// Receiving command
				kommando = data;
				kommando_data = 0xFF;
			}
			else if((data&0xF0) == COMMAND_ALL_OFF_CHANNEL)
 148:	90 3b       	cpi	r25, 0xB0	; 176
 14a:	29 f4       	brne	.+10     	; 0x156 <main+0x9c>
			{
				// Receiving stop all tones on channel command
				stoppalletoner_channel((data&0x0F));
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	0e 94 35 03 	call	0x66a	; 0x66a <stoppalletoner_channel>
				kommando = COMMAND_NONE;
 152:	c1 2f       	mov	r28, r17
 154:	c5 cf       	rjmp	.-118    	; 0xe0 <main+0x26>
			}
			else if((data&0xF0) == COMMAND_SPECIAL)
 156:	90 3f       	cpi	r25, 0xF0	; 240
 158:	19 f6       	brne	.-122    	; 0xe0 <main+0x26>
			{
				// Receiving special command
				if(data == COMMAND_ALL_OFF)
 15a:	81 3f       	cpi	r24, 0xF1	; 241
 15c:	21 f4       	brne	.+8      	; 0x166 <main+0xac>
				{
					stoppalletoner();
 15e:	0e 94 b7 02 	call	0x56e	; 0x56e <stoppalletoner>
				}
				else if(data == COMMAND_REGROUP)
				{
					regroup();
				}
				kommando = COMMAND_NONE;
 162:	c1 2f       	mov	r28, r17
 164:	bd cf       	rjmp	.-134    	; 0xe0 <main+0x26>
				// Receiving special command
				if(data == COMMAND_ALL_OFF)
				{
					stoppalletoner();
				}
				else if(data == COMMAND_REGROUP)
 166:	80 3f       	cpi	r24, 0xF0	; 240
 168:	09 f0       	breq	.+2      	; 0x16c <main+0xb2>
 16a:	b9 cf       	rjmp	.-142    	; 0xde <main+0x24>
				{
					regroup();
 16c:	0e 94 55 04 	call	0x8aa	; 0x8aa <regroup>
				}
				kommando = COMMAND_NONE;
 170:	c1 2f       	mov	r28, r17
 172:	b6 cf       	rjmp	.-148    	; 0xe0 <main+0x26>
			}
		}
		else
		{
			tonectl_tikk();
 174:	0e 94 90 01 	call	0x320	; 0x320 <tonectl_tikk>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 178:	8f e1       	ldi	r24, 0x1F	; 31
 17a:	9e e4       	ldi	r25, 0x4E	; 78
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xc2>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xc8>
 182:	00 00       	nop
 184:	ad cf       	rjmp	.-166    	; 0xe0 <main+0x26>

00000186 <aktiver>:
	PORTB |= (1<<GLOBAL_INT);
}

void aktiver(uint8_t id)
{
	switch(id)
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	8a 30       	cpi	r24, 0x0A	; 10
 18a:	91 05       	cpc	r25, r1
 18c:	c0 f4       	brcc	.+48     	; 0x1be <aktiver+0x38>
 18e:	fc 01       	movw	r30, r24
 190:	ec 5c       	subi	r30, 0xCC	; 204
 192:	ff 4f       	sbci	r31, 0xFF	; 255
 194:	0c 94 b5 04 	jmp	0x96a	; 0x96a <__tablejump2__>
	{
		case 0:
		{
			PORTD &= ~(1<<DRIVE0);
 198:	5a 98       	cbi	0x0b, 2	; 11
			break;
 19a:	11 c0       	rjmp	.+34     	; 0x1be <aktiver+0x38>
		}
		case 1:
		{
			PORTC &= ~(1<<DRIVE1);
 19c:	45 98       	cbi	0x08, 5	; 8
			break;
 19e:	0f c0       	rjmp	.+30     	; 0x1be <aktiver+0x38>
		}
		case 2:
		{
			PORTC &= ~(1<<DRIVE2);
 1a0:	44 98       	cbi	0x08, 4	; 8
			break;
 1a2:	0d c0       	rjmp	.+26     	; 0x1be <aktiver+0x38>
		}
		case 3:
		{
			PORTC &= ~(1<<DRIVE3);
 1a4:	43 98       	cbi	0x08, 3	; 8
			break;
 1a6:	0b c0       	rjmp	.+22     	; 0x1be <aktiver+0x38>
		}
		case 4:
		{
			PORTC &= ~(1<<DRIVE4);
 1a8:	42 98       	cbi	0x08, 2	; 8
			break;
 1aa:	09 c0       	rjmp	.+18     	; 0x1be <aktiver+0x38>
		}
		case 5:
		{
			PORTD &= ~(1<<DRIVE5);
 1ac:	5b 98       	cbi	0x0b, 3	; 11
			break;
 1ae:	07 c0       	rjmp	.+14     	; 0x1be <aktiver+0x38>
		}
		case 6:
		{
			PORTD &= ~(1<<DRIVE6);
 1b0:	5c 98       	cbi	0x0b, 4	; 11
			break;
 1b2:	05 c0       	rjmp	.+10     	; 0x1be <aktiver+0x38>
		}
		case 7:
		{
			PORTD &= ~(1<<DRIVE7);
 1b4:	5d 98       	cbi	0x0b, 5	; 11
			break;
 1b6:	03 c0       	rjmp	.+6      	; 0x1be <aktiver+0x38>
		}
		case 8:
		{
			PORTC &= ~(1<<DRIVE8);
 1b8:	40 98       	cbi	0x08, 0	; 8
			break;
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <aktiver+0x38>
		}
		case 9:
		{
			PORTC &= ~(1<<DRIVE9);
 1bc:	41 98       	cbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1be:	8a e1       	ldi	r24, 0x1A	; 26
 1c0:	8a 95       	dec	r24
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <aktiver+0x3a>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <aktiver+0x40>
 1c6:	08 95       	ret

000001c8 <deaktiver>:
 1c8:	8a e1       	ldi	r24, 0x1A	; 26
 1ca:	8a 95       	dec	r24
 1cc:	f1 f7       	brne	.-4      	; 0x1ca <deaktiver+0x2>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <deaktiver+0x8>
}

void deaktiver()
{
	_delay_us(5);
	PORTC |= (1<<DRIVE1)|(1<<DRIVE2)|(1<<DRIVE3)|(1<<DRIVE4)|(1<<DRIVE8)|(1<<DRIVE9);
 1d0:	88 b1       	in	r24, 0x08	; 8
 1d2:	8f 63       	ori	r24, 0x3F	; 63
 1d4:	88 b9       	out	0x08, r24	; 8
	PORTD |= (1<<DRIVE0)|(1<<DRIVE5)|(1<<DRIVE6)|(1<<DRIVE7);
 1d6:	8b b1       	in	r24, 0x0b	; 11
 1d8:	8c 63       	ori	r24, 0x3C	; 60
 1da:	8b b9       	out	0x0b, r24	; 11
 1dc:	08 95       	ret

000001de <stopp_alle>:
	deaktiver();
}

void stopp_alle()
{
	deaktiver();
 1de:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <deaktiver>
	PORTB &= ~(1<<GLOBAL_INT);
 1e2:	2a 98       	cbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e4:	2f ef       	ldi	r18, 0xFF	; 255
 1e6:	81 ee       	ldi	r24, 0xE1	; 225
 1e8:	94 e0       	ldi	r25, 0x04	; 4
 1ea:	21 50       	subi	r18, 0x01	; 1
 1ec:	80 40       	sbci	r24, 0x00	; 0
 1ee:	90 40       	sbci	r25, 0x00	; 0
 1f0:	e1 f7       	brne	.-8      	; 0x1ea <stopp_alle+0xc>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <stopp_alle+0x16>
 1f4:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<GLOBAL_INT);
 1f6:	2a 9a       	sbi	0x05, 2	; 5
 1f8:	08 95       	ret

000001fa <com_init>:
//
//
void com_init(void)
{

	DDRB |= (1<<COM_DATA)|(1<<COM_CLOCK);
 1fa:	84 b1       	in	r24, 0x04	; 4
 1fc:	88 62       	ori	r24, 0x28	; 40
 1fe:	84 b9       	out	0x04, r24	; 4
	PORTB |= (1<<COM_DATA);
 200:	2b 9a       	sbi	0x05, 3	; 5
	PORTB &= ~(1<<COM_CLOCK);
 202:	2d 98       	cbi	0x05, 5	; 5
	
	DDRC |= (1<<DRIVE1)|(1<<DRIVE2)|(1<<DRIVE3)|(1<<DRIVE4)|(1<<DRIVE8)|(1<<DRIVE9);
 204:	87 b1       	in	r24, 0x07	; 7
 206:	8f 63       	ori	r24, 0x3F	; 63
 208:	87 b9       	out	0x07, r24	; 7
	PORTC |= (1<<DRIVE1)|(1<<DRIVE2)|(1<<DRIVE3)|(1<<DRIVE4)|(1<<DRIVE8)|(1<<DRIVE9);
 20a:	88 b1       	in	r24, 0x08	; 8
 20c:	8f 63       	ori	r24, 0x3F	; 63
 20e:	88 b9       	out	0x08, r24	; 8
	
	DDRD |= (1<<DRIVE0)|(1<<DRIVE5)|(1<<DRIVE6)|(1<<DRIVE7);
 210:	8a b1       	in	r24, 0x0a	; 10
 212:	8c 63       	ori	r24, 0x3C	; 60
 214:	8a b9       	out	0x0a, r24	; 10
	PORTD |= (1<<DRIVE0)|(1<<DRIVE5)|(1<<DRIVE6)|(1<<DRIVE7);
 216:	8b b1       	in	r24, 0x0b	; 11
 218:	8c 63       	ori	r24, 0x3C	; 60
 21a:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= (1<<GLOBAL_INT);
 21c:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<GLOBAL_INT);
 21e:	2a 9a       	sbi	0x05, 2	; 5
 220:	8f e3       	ldi	r24, 0x3F	; 63
 222:	9c e9       	ldi	r25, 0x9C	; 156
 224:	01 97       	sbiw	r24, 0x01	; 1
 226:	f1 f7       	brne	.-4      	; 0x224 <com_init+0x2a>
 228:	00 c0       	rjmp	.+0      	; 0x22a <com_init+0x30>
 22a:	00 00       	nop
	_delay_ms(10);
	stopp_alle();
 22c:	0e 94 ef 00 	call	0x1de	; 0x1de <stopp_alle>
 230:	08 95       	ret

00000232 <tonegensend>:
	PORTD |= (1<<DRIVE0)|(1<<DRIVE5)|(1<<DRIVE6)|(1<<DRIVE7);
}

void tonegensend(uint8_t kommando)
{
	for (int i = 0; i < 8; i++)
 232:	20 e0       	ldi	r18, 0x00	; 0
 234:	30 e0       	ldi	r19, 0x00	; 0
	{
		if(kommando&(0x80>>i))
 236:	60 e8       	ldi	r22, 0x80	; 128
 238:	70 e0       	ldi	r23, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	ab 01       	movw	r20, r22
 23e:	02 2e       	mov	r0, r18
 240:	02 c0       	rjmp	.+4      	; 0x246 <tonegensend+0x14>
 242:	55 95       	asr	r21
 244:	47 95       	ror	r20
 246:	0a 94       	dec	r0
 248:	e2 f7       	brpl	.-8      	; 0x242 <tonegensend+0x10>
 24a:	48 23       	and	r20, r24
 24c:	59 23       	and	r21, r25
 24e:	45 2b       	or	r20, r21
 250:	11 f0       	breq	.+4      	; 0x256 <tonegensend+0x24>
			PORTB |= 1<<COM_DATA;
 252:	2b 9a       	sbi	0x05, 3	; 5
 254:	01 c0       	rjmp	.+2      	; 0x258 <tonegensend+0x26>
		else
			PORTB &= ~(1<<COM_DATA);
 256:	2b 98       	cbi	0x05, 3	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 258:	45 e0       	ldi	r20, 0x05	; 5
 25a:	4a 95       	dec	r20
 25c:	f1 f7       	brne	.-4      	; 0x25a <tonegensend+0x28>
 25e:	00 00       	nop
		_delay_us(1);
		PORTB |= 1<<COM_CLOCK;
 260:	2d 9a       	sbi	0x05, 5	; 5
 262:	45 e0       	ldi	r20, 0x05	; 5
 264:	4a 95       	dec	r20
 266:	f1 f7       	brne	.-4      	; 0x264 <tonegensend+0x32>
 268:	00 00       	nop
		_delay_us(1);
		PORTB &= ~(1<<COM_CLOCK);
 26a:	2d 98       	cbi	0x05, 5	; 5
	PORTD |= (1<<DRIVE0)|(1<<DRIVE5)|(1<<DRIVE6)|(1<<DRIVE7);
}

void tonegensend(uint8_t kommando)
{
	for (int i = 0; i < 8; i++)
 26c:	2f 5f       	subi	r18, 0xFF	; 255
 26e:	3f 4f       	sbci	r19, 0xFF	; 255
 270:	28 30       	cpi	r18, 0x08	; 8
 272:	31 05       	cpc	r19, r1
 274:	19 f7       	brne	.-58     	; 0x23c <tonegensend+0xa>
		_delay_us(1);
		PORTB |= 1<<COM_CLOCK;
		_delay_us(1);
		PORTB &= ~(1<<COM_CLOCK);
	}
	PORTB |= 1<<COM_DATA;
 276:	2b 9a       	sbi	0x05, 3	; 5
 278:	08 95       	ret

0000027a <spill>:
	_delay_ms(10);
	stopp_alle();
}

void spill(uint8_t tone, uint8_t id)
{
 27a:	cf 93       	push	r28
 27c:	c8 2f       	mov	r28, r24
 27e:	86 2f       	mov	r24, r22
	aktiver(id);
 280:	0e 94 c3 00 	call	0x186	; 0x186 <aktiver>
	tonegensend(tone&0x7F);
 284:	8c 2f       	mov	r24, r28
 286:	8f 77       	andi	r24, 0x7F	; 127
 288:	0e 94 19 01 	call	0x232	; 0x232 <tonegensend>
	deaktiver();
 28c:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <deaktiver>
}
 290:	cf 91       	pop	r28
 292:	08 95       	ret

00000294 <stopp>:

void stopp(uint8_t id)
{
	aktiver(id);
 294:	0e 94 c3 00 	call	0x186	; 0x186 <aktiver>
	tonegensend(0x80);
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	0e 94 19 01 	call	0x232	; 0x232 <tonegensend>
	deaktiver();
 29e:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <deaktiver>
 2a2:	08 95       	ret

000002a4 <stem>:
}

void stem(uint8_t tune, uint8_t id)
{
 2a4:	cf 93       	push	r28
 2a6:	c8 2f       	mov	r28, r24
 2a8:	86 2f       	mov	r24, r22
	aktiver(id);
 2aa:	0e 94 c3 00 	call	0x186	; 0x186 <aktiver>
	tonegensend(0x80|tune);
 2ae:	8c 2f       	mov	r24, r28
 2b0:	80 68       	ori	r24, 0x80	; 128
 2b2:	0e 94 19 01 	call	0x232	; 0x232 <tonegensend>
	deaktiver();
 2b6:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <deaktiver>
}
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <tonectl_init>:
//		Pr�v � spill/stopp toner, og hold basic oversikt.
//
//

void tonectl_init()
{
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	e6 e0       	ldi	r30, 0x06	; 6
 2c4:	f1 e0       	ldi	r31, 0x01	; 1
 2c6:	a8 e3       	ldi	r26, 0x38	; 56
 2c8:	b1 e0       	ldi	r27, 0x01	; 1
 2ca:	86 e1       	ldi	r24, 0x16	; 22
 2cc:	91 e0       	ldi	r25, 0x01	; 1
	for(uint8_t i = 0; i<16; i++)
	{
		channelfinetune[i] = 0;
 2ce:	11 92       	st	Z+, r1
		channelcoarsetune[i] = 0;
 2d0:	1d 92       	st	X+, r1
//
//

void tonectl_init()
{
	for(uint8_t i = 0; i<16; i++)
 2d2:	e8 17       	cp	r30, r24
 2d4:	f9 07       	cpc	r31, r25
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <tonectl_init+0x10>
 2d8:	ee e2       	ldi	r30, 0x2E	; 46
 2da:	f1 e0       	ldi	r31, 0x01	; 1
 2dc:	24 e2       	ldi	r18, 0x24	; 36
 2de:	31 e0       	ldi	r19, 0x01	; 1
 2e0:	ca e1       	ldi	r28, 0x1A	; 26
 2e2:	d1 e0       	ldi	r29, 0x01	; 1
 2e4:	68 e4       	ldi	r22, 0x48	; 72
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	48 e3       	ldi	r20, 0x38	; 56
 2ea:	51 e0       	ldi	r21, 0x01	; 1
		channelfinetune[i] = 0;
		channelcoarsetune[i] = 0;
	}
	for(uint8_t i = 0; i<ANTALLTONER; i++)
	{
		spillendekanal[i] = 255;
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
 2ee:	81 93       	st	Z+, r24
		spillendetone[i] = NOTONE;
 2f0:	d9 01       	movw	r26, r18
 2f2:	8d 93       	st	X+, r24
 2f4:	9d 01       	movw	r18, r26
		spillendetimeout[i] = NOTIMEOUT;
 2f6:	19 92       	st	Y+, r1
		spillenderekkefoelge[i] = 0;
 2f8:	db 01       	movw	r26, r22
 2fa:	1d 92       	st	X+, r1
 2fc:	1d 92       	st	X+, r1
 2fe:	1d 92       	st	X+, r1
 300:	1d 92       	st	X+, r1
 302:	bd 01       	movw	r22, r26
	for(uint8_t i = 0; i<16; i++)
	{
		channelfinetune[i] = 0;
		channelcoarsetune[i] = 0;
	}
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 304:	e4 17       	cp	r30, r20
 306:	f5 07       	cpc	r31, r21
 308:	91 f7       	brne	.-28     	; 0x2ee <tonectl_init+0x30>
		spillendekanal[i] = 255;
		spillendetone[i] = NOTONE;
		spillendetimeout[i] = NOTIMEOUT;
		spillenderekkefoelge[i] = 0;
	}
	toneteller = 0;
 30a:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <toneteller>
 30e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <toneteller+0x1>
 312:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <toneteller+0x2>
 316:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <toneteller+0x3>
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <tonectl_tikk>:

void tonectl_tikk()
{
 320:	af 92       	push	r10
 322:	bf 92       	push	r11
 324:	cf 92       	push	r12
 326:	df 92       	push	r13
 328:	ef 92       	push	r14
 32a:	ff 92       	push	r15
 32c:	0f 93       	push	r16
 32e:	1f 93       	push	r17
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	ca e1       	ldi	r28, 0x1A	; 26
 336:	d1 e0       	ldi	r29, 0x01	; 1
 338:	0f 2e       	mov	r0, r31
 33a:	f4 e2       	ldi	r31, 0x24	; 36
 33c:	af 2e       	mov	r10, r31
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	bf 2e       	mov	r11, r31
 342:	f0 2d       	mov	r31, r0
 344:	0f 2e       	mov	r0, r31
 346:	fe e2       	ldi	r31, 0x2E	; 46
 348:	ef 2e       	mov	r14, r31
 34a:	f1 e0       	ldi	r31, 0x01	; 1
 34c:	ff 2e       	mov	r15, r31
 34e:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 350:	10 e0       	ldi	r17, 0x00	; 0
			spillendetimeout[i]--;
			if(spillendetimeout[i] == 0)
			{
				stopp(i);
				spillendetimeout[i] = NOTIMEOUT;
				spillendetone[i] = NOTONE;
 352:	0f ef       	ldi	r16, 0xFF	; 255

void tonectl_tikk()
{
	for(uint8_t i = 0; i<ANTALLTONER; i++)
	{
		if(spillendetimeout[i] != NOTIMEOUT)
 354:	88 81       	ld	r24, Y
 356:	88 23       	and	r24, r24
 358:	61 f0       	breq	.+24     	; 0x372 <tonectl_tikk+0x52>
		{
			spillendetimeout[i]--;
 35a:	81 50       	subi	r24, 0x01	; 1
 35c:	88 83       	st	Y, r24
			if(spillendetimeout[i] == 0)
 35e:	81 11       	cpse	r24, r1
 360:	08 c0       	rjmp	.+16     	; 0x372 <tonectl_tikk+0x52>
			{
				stopp(i);
 362:	81 2f       	mov	r24, r17
 364:	0e 94 4a 01 	call	0x294	; 0x294 <stopp>
				spillendetimeout[i] = NOTIMEOUT;
 368:	18 82       	st	Y, r1
				spillendetone[i] = NOTONE;
 36a:	f5 01       	movw	r30, r10
 36c:	00 83       	st	Z, r16
				spillendekanal[i] = 0;
 36e:	f7 01       	movw	r30, r14
 370:	10 82       	st	Z, r1
	toneteller = 0;
}

void tonectl_tikk()
{
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 372:	1f 5f       	subi	r17, 0xFF	; 255
 374:	21 96       	adiw	r28, 0x01	; 1
 376:	ff ef       	ldi	r31, 0xFF	; 255
 378:	af 1a       	sub	r10, r31
 37a:	bf 0a       	sbc	r11, r31
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	e8 1a       	sub	r14, r24
 380:	f8 0a       	sbc	r15, r24
 382:	1a 30       	cpi	r17, 0x0A	; 10
 384:	39 f7       	brne	.-50     	; 0x354 <tonectl_tikk+0x34>
				spillendetone[i] = NOTONE;
				spillendekanal[i] = 0;
			}
		}
	}
}
 386:	df 91       	pop	r29
 388:	cf 91       	pop	r28
 38a:	1f 91       	pop	r17
 38c:	0f 91       	pop	r16
 38e:	ff 90       	pop	r15
 390:	ef 90       	pop	r14
 392:	df 90       	pop	r13
 394:	cf 90       	pop	r12
 396:	bf 90       	pop	r11
 398:	af 90       	pop	r10
 39a:	08 95       	ret

0000039c <starttone>:
		send(timeout&0x7F);
	}
}

void starttone(uint8_t tone, uint8_t i, uint8_t kanal, uint8_t timeout)
{
 39c:	8f 92       	push	r8
 39e:	9f 92       	push	r9
 3a0:	af 92       	push	r10
 3a2:	bf 92       	push	r11
 3a4:	cf 92       	push	r12
 3a6:	df 92       	push	r13
 3a8:	ef 92       	push	r14
 3aa:	ff 92       	push	r15
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	16 2f       	mov	r17, r22
	spillendetone[i] = tone;
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	fb 01       	movw	r30, r22
 3b8:	ec 5d       	subi	r30, 0xDC	; 220
 3ba:	fe 4f       	sbci	r31, 0xFE	; 254
 3bc:	80 83       	st	Z, r24
	spillendekanal[i] = kanal;
 3be:	fb 01       	movw	r30, r22
 3c0:	e2 5d       	subi	r30, 0xD2	; 210
 3c2:	fe 4f       	sbci	r31, 0xFE	; 254
 3c4:	40 83       	st	Z, r20
	spillenderekkefoelge[i] = toneteller++;
 3c6:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <toneteller>
 3ca:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <toneteller+0x1>
 3ce:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <toneteller+0x2>
 3d2:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <toneteller+0x3>
 3d6:	46 01       	movw	r8, r12
 3d8:	57 01       	movw	r10, r14
 3da:	9f ef       	ldi	r25, 0xFF	; 255
 3dc:	89 1a       	sub	r8, r25
 3de:	99 0a       	sbc	r9, r25
 3e0:	a9 0a       	sbc	r10, r25
 3e2:	b9 0a       	sbc	r11, r25
 3e4:	80 92 16 01 	sts	0x0116, r8	; 0x800116 <toneteller>
 3e8:	90 92 17 01 	sts	0x0117, r9	; 0x800117 <toneteller+0x1>
 3ec:	a0 92 18 01 	sts	0x0118, r10	; 0x800118 <toneteller+0x2>
 3f0:	b0 92 19 01 	sts	0x0119, r11	; 0x800119 <toneteller+0x3>
 3f4:	fb 01       	movw	r30, r22
 3f6:	ee 0f       	add	r30, r30
 3f8:	ff 1f       	adc	r31, r31
 3fa:	ee 0f       	add	r30, r30
 3fc:	ff 1f       	adc	r31, r31
 3fe:	e8 5b       	subi	r30, 0xB8	; 184
 400:	fe 4f       	sbci	r31, 0xFE	; 254
 402:	c0 82       	st	Z, r12
 404:	d1 82       	std	Z+1, r13	; 0x01
 406:	e2 82       	std	Z+2, r14	; 0x02
 408:	f3 82       	std	Z+3, r15	; 0x03
	spillendetimeout[i] = timeout;
 40a:	fb 01       	movw	r30, r22
 40c:	e6 5e       	subi	r30, 0xE6	; 230
 40e:	fe 4f       	sbci	r31, 0xFE	; 254
 410:	20 83       	st	Z, r18
	
		
	while(tone>75)
 412:	8c 34       	cpi	r24, 0x4C	; 76
 414:	18 f0       	brcs	.+6      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
	tone = tone - 12;
 416:	8c 50       	subi	r24, 0x0C	; 12
	spillendekanal[i] = kanal;
	spillenderekkefoelge[i] = toneteller++;
	spillendetimeout[i] = timeout;
	
		
	while(tone>75)
 418:	8c 34       	cpi	r24, 0x4C	; 76
 41a:	e8 f7       	brcc	.-6      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
	tone = tone - 12;
	while(tone<36)
 41c:	84 32       	cpi	r24, 0x24	; 36
 41e:	18 f4       	brcc	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
	tone = tone + 12;
 420:	84 5f       	subi	r24, 0xF4	; 244
	spillendetimeout[i] = timeout;
	
		
	while(tone>75)
	tone = tone - 12;
	while(tone<36)
 422:	84 32       	cpi	r24, 0x24	; 36
 424:	e8 f3       	brcs	.-6      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
	tone = tone + 12;
	tone = tone - 24;

	tone = (tone + channelcoarsetune[kanal])&0x7F;
 426:	c4 2f       	mov	r28, r20
 428:	d0 e0       	ldi	r29, 0x00	; 0
 42a:	fe 01       	movw	r30, r28
 42c:	e8 5c       	subi	r30, 0xC8	; 200
 42e:	fe 4f       	sbci	r31, 0xFE	; 254
 430:	90 81       	ld	r25, Z
 432:	98 51       	subi	r25, 0x18	; 24
 434:	89 0f       	add	r24, r25

	spill(tone, i);
 436:	61 2f       	mov	r22, r17
 438:	8f 77       	andi	r24, 0x7F	; 127
 43a:	0e 94 3d 01 	call	0x27a	; 0x27a <spill>
	
	if(channelfinetune[kanal] != 0)
 43e:	ca 5f       	subi	r28, 0xFA	; 250
 440:	de 4f       	sbci	r29, 0xFE	; 254
 442:	88 81       	ld	r24, Y
 444:	88 23       	and	r24, r24
 446:	19 f0       	breq	.+6      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
		stem(channelfinetune[kanal], i);
 448:	61 2f       	mov	r22, r17
 44a:	0e 94 52 01 	call	0x2a4	; 0x2a4 <stem>
}
 44e:	df 91       	pop	r29
 450:	cf 91       	pop	r28
 452:	1f 91       	pop	r17
 454:	ff 90       	pop	r15
 456:	ef 90       	pop	r14
 458:	df 90       	pop	r13
 45a:	cf 90       	pop	r12
 45c:	bf 90       	pop	r11
 45e:	af 90       	pop	r10
 460:	9f 90       	pop	r9
 462:	8f 90       	pop	r8
 464:	08 95       	ret

00000466 <spilltone>:
	}
}


void spilltone(uint8_t tone, uint8_t kanal, uint8_t timeout)
{
 466:	bf 92       	push	r11
 468:	cf 92       	push	r12
 46a:	df 92       	push	r13
 46c:	ef 92       	push	r14
 46e:	ff 92       	push	r15
 470:	0f 93       	push	r16
 472:	1f 93       	push	r17
 474:	cf 93       	push	r28
 476:	df 93       	push	r29
 478:	08 2f       	mov	r16, r24
 47a:	b6 2e       	mov	r11, r22
 47c:	14 2f       	mov	r17, r20
	for(uint8_t i = 0; i<ANTALLTONER; i++)
		if(spillendetone[i] == NOTONE)
 47e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <spillendetone>
 482:	9f 3f       	cpi	r25, 0xFF	; 255
 484:	39 f0       	breq	.+14     	; 0x494 <spilltone+0x2e>
 486:	e5 e2       	ldi	r30, 0x25	; 37
 488:	f1 e0       	ldi	r31, 0x01	; 1
}


void spilltone(uint8_t tone, uint8_t kanal, uint8_t timeout)
{
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 48a:	61 e0       	ldi	r22, 0x01	; 1
		if(spillendetone[i] == NOTONE)
 48c:	21 91       	ld	r18, Z+
 48e:	2f 3f       	cpi	r18, 0xFF	; 255
 490:	41 f4       	brne	.+16     	; 0x4a2 <spilltone+0x3c>
 492:	01 c0       	rjmp	.+2      	; 0x496 <spilltone+0x30>
}


void spilltone(uint8_t tone, uint8_t kanal, uint8_t timeout)
{
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 494:	60 e0       	ldi	r22, 0x00	; 0
		if(spillendetone[i] == NOTONE)
		{
			starttone(tone, i, kanal, timeout);
 496:	21 2f       	mov	r18, r17
 498:	4b 2d       	mov	r20, r11
 49a:	80 2f       	mov	r24, r16
 49c:	0e 94 ce 01 	call	0x39c	; 0x39c <starttone>
			return;
 4a0:	5c c0       	rjmp	.+184    	; 0x55a <__stack+0x5b>
}


void spilltone(uint8_t tone, uint8_t kanal, uint8_t timeout)
{
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	6a 30       	cpi	r22, 0x0A	; 10
 4a6:	91 f7       	brne	.-28     	; 0x48c <spilltone+0x26>
		{
			starttone(tone, i, kanal, timeout);
			return;
		}
	
	if(siste)
 4a8:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
 4ac:	99 23       	and	r25, r25
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <spilltone+0x4c>
 4b0:	47 c0       	rjmp	.+142    	; 0x540 <__stack+0x41>
 4b2:	cc e4       	ldi	r28, 0x4C	; 76
 4b4:	d1 e0       	ldi	r29, 0x01	; 1
 4b6:	ab e1       	ldi	r26, 0x1B	; 27
 4b8:	b1 e0       	ldi	r27, 0x01	; 1
 4ba:	91 e0       	ldi	r25, 0x01	; 1
 4bc:	8f ef       	ldi	r24, 0xFF	; 255
 4be:	30 e0       	ldi	r19, 0x00	; 0
	{
		uint8_t laveste = 0;
		uint8_t laveste_timeout = 0xFF;
		for(uint8_t i=1; i<ANTALLTONER; i++)
		{								// overkj�r eldste tone hvis n�dvendig, evt toner som har minst igjen
			if(spillenderekkefoelge[i] < spillenderekkefoelge[laveste] && timeout == 0)
 4c0:	c9 90       	ld	r12, Y+
 4c2:	d9 90       	ld	r13, Y+
 4c4:	e9 90       	ld	r14, Y+
 4c6:	f9 90       	ld	r15, Y+
 4c8:	e3 2f       	mov	r30, r19
 4ca:	f0 e0       	ldi	r31, 0x00	; 0
 4cc:	ee 0f       	add	r30, r30
 4ce:	ff 1f       	adc	r31, r31
 4d0:	ee 0f       	add	r30, r30
 4d2:	ff 1f       	adc	r31, r31
 4d4:	e8 5b       	subi	r30, 0xB8	; 184
 4d6:	fe 4f       	sbci	r31, 0xFE	; 254
 4d8:	40 81       	ld	r20, Z
 4da:	51 81       	ldd	r21, Z+1	; 0x01
 4dc:	62 81       	ldd	r22, Z+2	; 0x02
 4de:	73 81       	ldd	r23, Z+3	; 0x03
 4e0:	c4 16       	cp	r12, r20
 4e2:	d5 06       	cpc	r13, r21
 4e4:	e6 06       	cpc	r14, r22
 4e6:	f7 06       	cpc	r15, r23
 4e8:	18 f4       	brcc	.+6      	; 0x4f0 <spilltone+0x8a>
 4ea:	11 11       	cpse	r17, r1
 4ec:	01 c0       	rjmp	.+2      	; 0x4f0 <spilltone+0x8a>
 4ee:	39 2f       	mov	r19, r25
				laveste = i;
			if(spillendetimeout[i] != NOTIMEOUT && (laveste_timeout == 0xFF || spillendetimeout[i] < spillendetimeout[laveste_timeout]) && (timeout == NOTIMEOUT || timeout >= spillendetimeout[i]))
 4f0:	2d 91       	ld	r18, X+
 4f2:	22 23       	and	r18, r18
 4f4:	81 f0       	breq	.+32     	; 0x516 <__stack+0x17>
 4f6:	8f 3f       	cpi	r24, 0xFF	; 255
 4f8:	39 f0       	breq	.+14     	; 0x508 <__stack+0x9>
 4fa:	e8 2f       	mov	r30, r24
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	e6 5e       	subi	r30, 0xE6	; 230
 500:	fe 4f       	sbci	r31, 0xFE	; 254
 502:	40 81       	ld	r20, Z
 504:	24 17       	cp	r18, r20
 506:	38 f4       	brcc	.+14     	; 0x516 <__stack+0x17>
 508:	11 23       	and	r17, r17
 50a:	21 f0       	breq	.+8      	; 0x514 <__stack+0x15>
 50c:	12 17       	cp	r17, r18
 50e:	18 f0       	brcs	.+6      	; 0x516 <__stack+0x17>
 510:	89 2f       	mov	r24, r25
 512:	01 c0       	rjmp	.+2      	; 0x516 <__stack+0x17>
 514:	89 2f       	mov	r24, r25
	
	if(siste)
	{
		uint8_t laveste = 0;
		uint8_t laveste_timeout = 0xFF;
		for(uint8_t i=1; i<ANTALLTONER; i++)
 516:	9f 5f       	subi	r25, 0xFF	; 255
 518:	9a 30       	cpi	r25, 0x0A	; 10
 51a:	91 f6       	brne	.-92     	; 0x4c0 <spilltone+0x5a>
				laveste = i;
			if(spillendetimeout[i] != NOTIMEOUT && (laveste_timeout == 0xFF || spillendetimeout[i] < spillendetimeout[laveste_timeout]) && (timeout == NOTIMEOUT || timeout >= spillendetimeout[i]))
				laveste_timeout = i;
		}
		
		if(laveste_timeout == 0xFF && timeout == 0)
 51c:	8f 3f       	cpi	r24, 0xFF	; 255
 51e:	49 f4       	brne	.+18     	; 0x532 <__stack+0x33>
 520:	11 11       	cpse	r17, r1
 522:	1b c0       	rjmp	.+54     	; 0x55a <__stack+0x5b>
			starttone(tone, laveste, kanal, timeout);
 524:	20 e0       	ldi	r18, 0x00	; 0
 526:	4b 2d       	mov	r20, r11
 528:	63 2f       	mov	r22, r19
 52a:	80 2f       	mov	r24, r16
 52c:	0e 94 ce 01 	call	0x39c	; 0x39c <starttone>
 530:	14 c0       	rjmp	.+40     	; 0x55a <__stack+0x5b>
		else if(laveste_timeout != 0xFF)
			starttone(tone, laveste_timeout, kanal, timeout);
 532:	21 2f       	mov	r18, r17
 534:	4b 2d       	mov	r20, r11
 536:	68 2f       	mov	r22, r24
 538:	80 2f       	mov	r24, r16
 53a:	0e 94 ce 01 	call	0x39c	; 0x39c <starttone>
 53e:	0d c0       	rjmp	.+26     	; 0x55a <__stack+0x5b>
		return;
	}
	else
	{
		send((kanal&0x0F)|COMMAND_NOTE_ON);				// Send videre hvis vi ikke kan spille med en gang
 540:	8b 2d       	mov	r24, r11
 542:	8f 70       	andi	r24, 0x0F	; 15
 544:	80 69       	ori	r24, 0x90	; 144
 546:	0e 94 3c 04 	call	0x878	; 0x878 <send>
		send(tone&0x7F);
 54a:	80 2f       	mov	r24, r16
 54c:	8f 77       	andi	r24, 0x7F	; 127
 54e:	0e 94 3c 04 	call	0x878	; 0x878 <send>
		send(timeout&0x7F);
 552:	81 2f       	mov	r24, r17
 554:	8f 77       	andi	r24, 0x7F	; 127
 556:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	}
}
 55a:	df 91       	pop	r29
 55c:	cf 91       	pop	r28
 55e:	1f 91       	pop	r17
 560:	0f 91       	pop	r16
 562:	ff 90       	pop	r15
 564:	ef 90       	pop	r14
 566:	df 90       	pop	r13
 568:	cf 90       	pop	r12
 56a:	bf 90       	pop	r11
 56c:	08 95       	ret

0000056e <stoppalletoner>:
	if(channelfinetune[kanal] != 0)
		stem(channelfinetune[kanal], i);
}

void stoppalletoner()
{
 56e:	cf 93       	push	r28
 570:	df 93       	push	r29
	send(COMMAND_ALL_OFF);
 572:	81 ef       	ldi	r24, 0xF1	; 241
 574:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	stopp_alle();
 578:	0e 94 ef 00 	call	0x1de	; 0x1de <stopp_alle>
 57c:	ea e1       	ldi	r30, 0x1A	; 26
 57e:	f1 e0       	ldi	r31, 0x01	; 1
 580:	c4 e2       	ldi	r28, 0x24	; 36
 582:	d1 e0       	ldi	r29, 0x01	; 1
 584:	ae e2       	ldi	r26, 0x2E	; 46
 586:	b1 e0       	ldi	r27, 0x01	; 1
 588:	24 e2       	ldi	r18, 0x24	; 36
 58a:	31 e0       	ldi	r19, 0x01	; 1
	for(uint8_t i = 0; i<ANTALLTONER; i++)
	{
		spillendetimeout[i] = NOTIMEOUT;
		spillendetone[i] = NOTONE;
 58c:	8f ef       	ldi	r24, 0xFF	; 255
{
	send(COMMAND_ALL_OFF);
	stopp_alle();
	for(uint8_t i = 0; i<ANTALLTONER; i++)
	{
		spillendetimeout[i] = NOTIMEOUT;
 58e:	11 92       	st	Z+, r1
		spillendetone[i] = NOTONE;
 590:	89 93       	st	Y+, r24
		spillendekanal[i] = 255;
 592:	8d 93       	st	X+, r24

void stoppalletoner()
{
	send(COMMAND_ALL_OFF);
	stopp_alle();
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 594:	e2 17       	cp	r30, r18
 596:	f3 07       	cpc	r31, r19
 598:	d1 f7       	brne	.-12     	; 0x58e <stoppalletoner+0x20>
	{
		spillendetimeout[i] = NOTIMEOUT;
		spillendetone[i] = NOTONE;
		spillendekanal[i] = 255;
	}
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <offsettone>:

void offsettone(uint8_t semitones, uint8_t finetune, uint8_t channel)
{
 5a0:	8f 92       	push	r8
 5a2:	9f 92       	push	r9
 5a4:	af 92       	push	r10
 5a6:	bf 92       	push	r11
 5a8:	cf 92       	push	r12
 5aa:	df 92       	push	r13
 5ac:	ef 92       	push	r14
 5ae:	ff 92       	push	r15
 5b0:	0f 93       	push	r16
 5b2:	1f 93       	push	r17
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	b8 2e       	mov	r11, r24
 5ba:	a6 2e       	mov	r10, r22
 5bc:	d4 2f       	mov	r29, r20
	send((channel&0x0F)|COMMAND_TUNE_CHANNEL);
 5be:	84 2f       	mov	r24, r20
 5c0:	8f 70       	andi	r24, 0x0F	; 15
 5c2:	80 6a       	ori	r24, 0xA0	; 160
 5c4:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	send(semitones&0x7F);
 5c8:	8b 2d       	mov	r24, r11
 5ca:	8f 77       	andi	r24, 0x7F	; 127
 5cc:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	send(finetune&0x7F);
 5d0:	8a 2d       	mov	r24, r10
 5d2:	8f 77       	andi	r24, 0x7F	; 127
 5d4:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	uint8_t old_coarse = channelcoarsetune[channel];
 5d8:	ed 2f       	mov	r30, r29
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	df 01       	movw	r26, r30
 5de:	a8 5c       	subi	r26, 0xC8	; 200
 5e0:	be 4f       	sbci	r27, 0xFE	; 254
 5e2:	9c 90       	ld	r9, X
	uint8_t old_fine = channelfinetune[channel];
 5e4:	ea 5f       	subi	r30, 0xFA	; 250
 5e6:	fe 4f       	sbci	r31, 0xFE	; 254
 5e8:	80 80       	ld	r8, Z
	channelcoarsetune[channel] = semitones;
 5ea:	bc 92       	st	X, r11
	channelfinetune[channel] = finetune;
 5ec:	a0 82       	st	Z, r10
 5ee:	0f 2e       	mov	r0, r31
 5f0:	fe e2       	ldi	r31, 0x2E	; 46
 5f2:	cf 2e       	mov	r12, r31
 5f4:	f1 e0       	ldi	r31, 0x01	; 1
 5f6:	df 2e       	mov	r13, r31
 5f8:	f0 2d       	mov	r31, r0
 5fa:	04 e2       	ldi	r16, 0x24	; 36
 5fc:	11 e0       	ldi	r17, 0x01	; 1
 5fe:	0f 2e       	mov	r0, r31
 600:	fa e1       	ldi	r31, 0x1A	; 26
 602:	ef 2e       	mov	r14, r31
 604:	f1 e0       	ldi	r31, 0x01	; 1
 606:	ff 2e       	mov	r15, r31
 608:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 60a:	c0 e0       	ldi	r28, 0x00	; 0
	{
		if(spillendekanal[i] == channel && spillendetone[i] != NOTONE)
 60c:	f6 01       	movw	r30, r12
 60e:	81 91       	ld	r24, Z+
 610:	6f 01       	movw	r12, r30
 612:	d8 13       	cpse	r29, r24
 614:	15 c0       	rjmp	.+42     	; 0x640 <offsettone+0xa0>
 616:	f8 01       	movw	r30, r16
 618:	80 81       	ld	r24, Z
 61a:	8f 3f       	cpi	r24, 0xFF	; 255
 61c:	89 f0       	breq	.+34     	; 0x640 <offsettone+0xa0>
		{
			if(old_coarse != semitones || (finetune == 0 && old_fine != 0))
 61e:	b9 10       	cpse	r11, r9
 620:	04 c0       	rjmp	.+8      	; 0x62a <offsettone+0x8a>
 622:	a1 10       	cpse	r10, r1
 624:	09 c0       	rjmp	.+18     	; 0x638 <offsettone+0x98>
 626:	88 20       	and	r8, r8
 628:	59 f0       	breq	.+22     	; 0x640 <offsettone+0xa0>
			{
				starttone(spillendetone[i], i, spillendekanal[i], spillendetimeout[i]);
 62a:	f7 01       	movw	r30, r14
 62c:	20 81       	ld	r18, Z
 62e:	4d 2f       	mov	r20, r29
 630:	6c 2f       	mov	r22, r28
 632:	0e 94 ce 01 	call	0x39c	; 0x39c <starttone>
 636:	04 c0       	rjmp	.+8      	; 0x640 <offsettone+0xa0>
			}
			else if(finetune != 0)
				stem(finetune, i);
 638:	6c 2f       	mov	r22, r28
 63a:	8a 2d       	mov	r24, r10
 63c:	0e 94 52 01 	call	0x2a4	; 0x2a4 <stem>
	send(finetune&0x7F);
	uint8_t old_coarse = channelcoarsetune[channel];
	uint8_t old_fine = channelfinetune[channel];
	channelcoarsetune[channel] = semitones;
	channelfinetune[channel] = finetune;
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 640:	cf 5f       	subi	r28, 0xFF	; 255
 642:	0f 5f       	subi	r16, 0xFF	; 255
 644:	1f 4f       	sbci	r17, 0xFF	; 255
 646:	ff ef       	ldi	r31, 0xFF	; 255
 648:	ef 1a       	sub	r14, r31
 64a:	ff 0a       	sbc	r15, r31
 64c:	ca 30       	cpi	r28, 0x0A	; 10
 64e:	f1 f6       	brne	.-68     	; 0x60c <offsettone+0x6c>
			}
			else if(finetune != 0)
				stem(finetune, i);
		}
	}
}
 650:	df 91       	pop	r29
 652:	cf 91       	pop	r28
 654:	1f 91       	pop	r17
 656:	0f 91       	pop	r16
 658:	ff 90       	pop	r15
 65a:	ef 90       	pop	r14
 65c:	df 90       	pop	r13
 65e:	cf 90       	pop	r12
 660:	bf 90       	pop	r11
 662:	af 90       	pop	r10
 664:	9f 90       	pop	r9
 666:	8f 90       	pop	r8
 668:	08 95       	ret

0000066a <stoppalletoner_channel>:

void stoppalletoner_channel(uint8_t kanal)
{
 66a:	bf 92       	push	r11
 66c:	cf 92       	push	r12
 66e:	df 92       	push	r13
 670:	ef 92       	push	r14
 672:	ff 92       	push	r15
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
 67a:	df 93       	push	r29
 67c:	d8 2f       	mov	r29, r24
	send((kanal&0x0F)|COMMAND_ALL_OFF_CHANNEL);
 67e:	8f 70       	andi	r24, 0x0F	; 15
 680:	80 6b       	ori	r24, 0xB0	; 176
 682:	0e 94 3c 04 	call	0x878	; 0x878 <send>
 686:	0e e2       	ldi	r16, 0x2E	; 46
 688:	11 e0       	ldi	r17, 0x01	; 1
 68a:	0f 2e       	mov	r0, r31
 68c:	fa e1       	ldi	r31, 0x1A	; 26
 68e:	cf 2e       	mov	r12, r31
 690:	f1 e0       	ldi	r31, 0x01	; 1
 692:	df 2e       	mov	r13, r31
 694:	f0 2d       	mov	r31, r0
 696:	0f 2e       	mov	r0, r31
 698:	f4 e2       	ldi	r31, 0x24	; 36
 69a:	ef 2e       	mov	r14, r31
 69c:	f1 e0       	ldi	r31, 0x01	; 1
 69e:	ff 2e       	mov	r15, r31
 6a0:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 6a2:	c0 e0       	ldi	r28, 0x00	; 0
		if(spillendekanal[i] == kanal)
		{
			stopp(i);
			spillendetimeout[i] = NOTIMEOUT;
			spillendetone[i] = NOTONE;
 6a4:	bb 24       	eor	r11, r11
 6a6:	ba 94       	dec	r11

void stoppalletoner_channel(uint8_t kanal)
{
	send((kanal&0x0F)|COMMAND_ALL_OFF_CHANNEL);
	for(uint8_t i = 0; i<ANTALLTONER; i++)
		if(spillendekanal[i] == kanal)
 6a8:	f8 01       	movw	r30, r16
 6aa:	80 81       	ld	r24, Z
 6ac:	d8 13       	cpse	r29, r24
 6ae:	09 c0       	rjmp	.+18     	; 0x6c2 <stoppalletoner_channel+0x58>
		{
			stopp(i);
 6b0:	8c 2f       	mov	r24, r28
 6b2:	0e 94 4a 01 	call	0x294	; 0x294 <stopp>
			spillendetimeout[i] = NOTIMEOUT;
 6b6:	f6 01       	movw	r30, r12
 6b8:	10 82       	st	Z, r1
			spillendetone[i] = NOTONE;
 6ba:	f7 01       	movw	r30, r14
 6bc:	b0 82       	st	Z, r11
			spillendekanal[i] = 0;
 6be:	f8 01       	movw	r30, r16
 6c0:	10 82       	st	Z, r1
}

void stoppalletoner_channel(uint8_t kanal)
{
	send((kanal&0x0F)|COMMAND_ALL_OFF_CHANNEL);
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 6c2:	cf 5f       	subi	r28, 0xFF	; 255
 6c4:	0f 5f       	subi	r16, 0xFF	; 255
 6c6:	1f 4f       	sbci	r17, 0xFF	; 255
 6c8:	ff ef       	ldi	r31, 0xFF	; 255
 6ca:	cf 1a       	sub	r12, r31
 6cc:	df 0a       	sbc	r13, r31
 6ce:	8f ef       	ldi	r24, 0xFF	; 255
 6d0:	e8 1a       	sub	r14, r24
 6d2:	f8 0a       	sbc	r15, r24
 6d4:	ca 30       	cpi	r28, 0x0A	; 10
 6d6:	41 f7       	brne	.-48     	; 0x6a8 <stoppalletoner_channel+0x3e>
			stopp(i);
			spillendetimeout[i] = NOTIMEOUT;
			spillendetone[i] = NOTONE;
			spillendekanal[i] = 0;
		}
}
 6d8:	df 91       	pop	r29
 6da:	cf 91       	pop	r28
 6dc:	1f 91       	pop	r17
 6de:	0f 91       	pop	r16
 6e0:	ff 90       	pop	r15
 6e2:	ef 90       	pop	r14
 6e4:	df 90       	pop	r13
 6e6:	cf 90       	pop	r12
 6e8:	bf 90       	pop	r11
 6ea:	08 95       	ret

000006ec <stopptone>:

void stopptone(uint8_t tone, uint8_t kanal)
{
 6ec:	8f 92       	push	r8
 6ee:	9f 92       	push	r9
 6f0:	af 92       	push	r10
 6f2:	bf 92       	push	r11
 6f4:	cf 92       	push	r12
 6f6:	df 92       	push	r13
 6f8:	ef 92       	push	r14
 6fa:	ff 92       	push	r15
 6fc:	0f 93       	push	r16
 6fe:	1f 93       	push	r17
 700:	cf 93       	push	r28
 702:	df 93       	push	r29
 704:	08 2f       	mov	r16, r24
 706:	96 2e       	mov	r9, r22
	send((kanal&0x0F)|COMMAND_NOTE_OFF);
 708:	86 2f       	mov	r24, r22
 70a:	8f 70       	andi	r24, 0x0F	; 15
 70c:	80 68       	ori	r24, 0x80	; 128
 70e:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	send(tone&0x7F);
 712:	80 2f       	mov	r24, r16
 714:	8f 77       	andi	r24, 0x7F	; 127
 716:	0e 94 3c 04 	call	0x878	; 0x878 <send>
 71a:	c4 e2       	ldi	r28, 0x24	; 36
 71c:	d1 e0       	ldi	r29, 0x01	; 1
 71e:	0f 2e       	mov	r0, r31
 720:	fe e2       	ldi	r31, 0x2E	; 46
 722:	ef 2e       	mov	r14, r31
 724:	f1 e0       	ldi	r31, 0x01	; 1
 726:	ff 2e       	mov	r15, r31
 728:	f0 2d       	mov	r31, r0
 72a:	0f 2e       	mov	r0, r31
 72c:	fa e1       	ldi	r31, 0x1A	; 26
 72e:	cf 2e       	mov	r12, r31
 730:	f1 e0       	ldi	r31, 0x01	; 1
 732:	df 2e       	mov	r13, r31
 734:	f0 2d       	mov	r31, r0
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 736:	10 e0       	ldi	r17, 0x00	; 0
	if(spillendetone[i] == tone && spillendekanal[i] == kanal)
	{
		stopp(i);
		spillendetimeout[i] = NOTIMEOUT;
		spillendetone[i] = NOTONE;
 738:	88 24       	eor	r8, r8
 73a:	8a 94       	dec	r8
void stopptone(uint8_t tone, uint8_t kanal)
{
	send((kanal&0x0F)|COMMAND_NOTE_OFF);
	send(tone&0x7F);
	for(uint8_t i = 0; i<ANTALLTONER; i++)
	if(spillendetone[i] == tone && spillendekanal[i] == kanal)
 73c:	88 81       	ld	r24, Y
 73e:	08 13       	cpse	r16, r24
 740:	0c c0       	rjmp	.+24     	; 0x75a <stopptone+0x6e>
 742:	f7 01       	movw	r30, r14
 744:	80 81       	ld	r24, Z
 746:	98 12       	cpse	r9, r24
 748:	08 c0       	rjmp	.+16     	; 0x75a <stopptone+0x6e>
	{
		stopp(i);
 74a:	81 2f       	mov	r24, r17
 74c:	0e 94 4a 01 	call	0x294	; 0x294 <stopp>
		spillendetimeout[i] = NOTIMEOUT;
 750:	f6 01       	movw	r30, r12
 752:	10 82       	st	Z, r1
		spillendetone[i] = NOTONE;
 754:	88 82       	st	Y, r8
		spillendekanal[i] = 0;
 756:	f7 01       	movw	r30, r14
 758:	10 82       	st	Z, r1

void stopptone(uint8_t tone, uint8_t kanal)
{
	send((kanal&0x0F)|COMMAND_NOTE_OFF);
	send(tone&0x7F);
	for(uint8_t i = 0; i<ANTALLTONER; i++)
 75a:	1f 5f       	subi	r17, 0xFF	; 255
 75c:	21 96       	adiw	r28, 0x01	; 1
 75e:	ff ef       	ldi	r31, 0xFF	; 255
 760:	ef 1a       	sub	r14, r31
 762:	ff 0a       	sbc	r15, r31
 764:	8f ef       	ldi	r24, 0xFF	; 255
 766:	c8 1a       	sub	r12, r24
 768:	d8 0a       	sbc	r13, r24
 76a:	1a 30       	cpi	r17, 0x0A	; 10
 76c:	39 f7       	brne	.-50     	; 0x73c <stopptone+0x50>
		stopp(i);
		spillendetimeout[i] = NOTIMEOUT;
		spillendetone[i] = NOTONE;
		spillendekanal[i] = 0;
	}
 76e:	df 91       	pop	r29
 770:	cf 91       	pop	r28
 772:	1f 91       	pop	r17
 774:	0f 91       	pop	r16
 776:	ff 90       	pop	r15
 778:	ef 90       	pop	r14
 77a:	df 90       	pop	r13
 77c:	cf 90       	pop	r12
 77e:	bf 90       	pop	r11
 780:	af 90       	pop	r10
 782:	9f 90       	pop	r9
 784:	8f 90       	pop	r8
 786:	08 95       	ret

00000788 <uart_init>:
//////    Blablabla... https://appelsiini.net/2011/simple-usart-with-avr-libc/
//////
//////
void uart_init(void) {
	
	DDRD |= (1<<UART_RX);
 788:	50 9a       	sbi	0x0a, 0	; 10
	DDRD &= ~(1<<UART_TX);
 78a:	51 98       	cbi	0x0a, 1	; 10
	PORTD |= (1<<UART_TX);
 78c:	59 9a       	sbi	0x0b, 1	; 11
	PORTD &= ~(1<<UART_RX);
 78e:	58 98       	cbi	0x0b, 0	; 11
	MCUCR &= ~(1<<PUD);
 790:	85 b7       	in	r24, 0x35	; 53
 792:	8f 7e       	andi	r24, 0xEF	; 239
 794:	85 bf       	out	0x35, r24	; 53
	
	UBRR0H = UBRRH_VALUE;
 796:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 79a:	81 e1       	ldi	r24, 0x11	; 17
 79c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= 1<<U2X0;
	#else
	UCSR0A &= ~(1<<U2X0);
 7a0:	e0 ec       	ldi	r30, 0xC0	; 192
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	8d 7f       	andi	r24, 0xFD	; 253
 7a8:	80 83       	st	Z, r24
	#endif

	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00); /* 8-bit data */
 7aa:	e2 ec       	ldi	r30, 0xC2	; 194
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	86 60       	ori	r24, 0x06	; 6
 7b2:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);   /* Enable RX and TX */
 7b4:	e1 ec       	ldi	r30, 0xC1	; 193
 7b6:	f0 e0       	ldi	r31, 0x00	; 0
 7b8:	80 81       	ld	r24, Z
 7ba:	88 61       	ori	r24, 0x18	; 24
 7bc:	80 83       	st	Z, r24


	UCSR0B |= (1 << RXCIE0); // Enable the USART Recieve Complete interrupt (USART_RXC)
 7be:	80 81       	ld	r24, Z
 7c0:	80 68       	ori	r24, 0x80	; 128
 7c2:	80 83       	st	Z, r24
	sei(); // Enable the Global Interrupt Enable flag so that interrupts can be processed
 7c4:	78 94       	sei
 7c6:	08 95       	ret

000007c8 <__vector_18>:
}

ISR(USART_RX_vect)
{
 7c8:	1f 92       	push	r1
 7ca:	0f 92       	push	r0
 7cc:	0f b6       	in	r0, 0x3f	; 63
 7ce:	0f 92       	push	r0
 7d0:	11 24       	eor	r1, r1
 7d2:	2f 93       	push	r18
 7d4:	3f 93       	push	r19
 7d6:	4f 93       	push	r20
 7d8:	5f 93       	push	r21
 7da:	6f 93       	push	r22
 7dc:	7f 93       	push	r23
 7de:	8f 93       	push	r24
 7e0:	9f 93       	push	r25
 7e2:	af 93       	push	r26
 7e4:	bf 93       	push	r27
 7e6:	ef 93       	push	r30
 7e8:	ff 93       	push	r31
	cli();
 7ea:	f8 94       	cli
	serialbuffer[hode++] = UDR0;
 7ec:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <hode>
 7f0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <hode+0x1>
 7f4:	9c 01       	movw	r18, r24
 7f6:	2f 5f       	subi	r18, 0xFF	; 255
 7f8:	3f 4f       	sbci	r19, 0xFF	; 255
 7fa:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <hode+0x1>
 7fe:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <hode>
 802:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 806:	fc 01       	movw	r30, r24
 808:	e0 59       	subi	r30, 0x90	; 144
 80a:	fe 4f       	sbci	r31, 0xFE	; 254
 80c:	20 83       	st	Z, r18
	hode = hode%BUFFERLENGDE;
 80e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <hode>
 812:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <hode+0x1>
 816:	9a 01       	movw	r18, r20
 818:	36 95       	lsr	r19
 81a:	27 95       	ror	r18
 81c:	36 95       	lsr	r19
 81e:	27 95       	ror	r18
 820:	a5 ec       	ldi	r26, 0xC5	; 197
 822:	b0 e2       	ldi	r27, 0x20	; 32
 824:	0e 94 bb 04 	call	0x976	; 0x976 <__umulhisi3>
 828:	92 95       	swap	r25
 82a:	82 95       	swap	r24
 82c:	8f 70       	andi	r24, 0x0F	; 15
 82e:	89 27       	eor	r24, r25
 830:	9f 70       	andi	r25, 0x0F	; 15
 832:	89 27       	eor	r24, r25
 834:	64 ef       	ldi	r22, 0xF4	; 244
 836:	71 e0       	ldi	r23, 0x01	; 1
 838:	86 9f       	mul	r24, r22
 83a:	90 01       	movw	r18, r0
 83c:	87 9f       	mul	r24, r23
 83e:	30 0d       	add	r19, r0
 840:	96 9f       	mul	r25, r22
 842:	30 0d       	add	r19, r0
 844:	11 24       	eor	r1, r1
 846:	ca 01       	movw	r24, r20
 848:	82 1b       	sub	r24, r18
 84a:	93 0b       	sbc	r25, r19
 84c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <hode+0x1>
 850:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <hode>
	sei();
 854:	78 94       	sei
}
 856:	ff 91       	pop	r31
 858:	ef 91       	pop	r30
 85a:	bf 91       	pop	r27
 85c:	af 91       	pop	r26
 85e:	9f 91       	pop	r25
 860:	8f 91       	pop	r24
 862:	7f 91       	pop	r23
 864:	6f 91       	pop	r22
 866:	5f 91       	pop	r21
 868:	4f 91       	pop	r20
 86a:	3f 91       	pop	r19
 86c:	2f 91       	pop	r18
 86e:	0f 90       	pop	r0
 870:	0f be       	out	0x3f, r0	; 63
 872:	0f 90       	pop	r0
 874:	1f 90       	pop	r1
 876:	18 95       	reti

00000878 <send>:

void send(uint8_t c) {
	UDR0 = c;
 878:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	while(~(UCSR0A | ~(1<<UDRE0))){};		/* Wait until transmission ready. */
 87c:	e0 ec       	ldi	r30, 0xC0	; 192
 87e:	f0 e0       	ldi	r31, 0x00	; 0
 880:	80 81       	ld	r24, Z
 882:	90 e0       	ldi	r25, 0x00	; 0
 884:	8f 6d       	ori	r24, 0xDF	; 223
 886:	9f 6f       	ori	r25, 0xFF	; 255
 888:	01 96       	adiw	r24, 0x01	; 1
 88a:	d1 f7       	brne	.-12     	; 0x880 <send+0x8>
}
 88c:	08 95       	ret

0000088e <tilgjengelig>:

uint8_t tilgjengelig()
{
	return (hode != hale);
 88e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <hode>
 892:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <hode+0x1>
 896:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__data_end>
 89a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__data_end+0x1>
 89e:	81 e0       	ldi	r24, 0x01	; 1
 8a0:	42 17       	cp	r20, r18
 8a2:	53 07       	cpc	r21, r19
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <tilgjengelig+0x1a>
 8a6:	80 e0       	ldi	r24, 0x00	; 0
}
 8a8:	08 95       	ret

000008aa <regroup>:

void regroup()
{
	cli();
 8aa:	f8 94       	cli
	send(COMMAND_REGROUP);				// Relay
 8ac:	80 ef       	ldi	r24, 0xF0	; 240
 8ae:	0e 94 3c 04 	call	0x878	; 0x878 <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 8b2:	8f e3       	ldi	r24, 0x3F	; 63
 8b4:	9c e9       	ldi	r25, 0x9C	; 156
 8b6:	01 97       	sbiw	r24, 0x01	; 1
 8b8:	f1 f7       	brne	.-4      	; 0x8b6 <regroup+0xc>
 8ba:	00 c0       	rjmp	.+0      	; 0x8bc <regroup+0x12>
 8bc:	00 00       	nop
	_delay_ms(10);
	UCSR0B &= ~((1<<RXEN0)|(1<<TXEN0));	// Respond to caller and signal existence
 8be:	e1 ec       	ldi	r30, 0xC1	; 193
 8c0:	f0 e0       	ldi	r31, 0x00	; 0
 8c2:	80 81       	ld	r24, Z
 8c4:	87 7e       	andi	r24, 0xE7	; 231
 8c6:	80 83       	st	Z, r24
 8c8:	9f ef       	ldi	r25, 0xFF	; 255
 8ca:	26 e4       	ldi	r18, 0x46	; 70
 8cc:	89 e0       	ldi	r24, 0x09	; 9
 8ce:	91 50       	subi	r25, 0x01	; 1
 8d0:	20 40       	sbci	r18, 0x00	; 0
 8d2:	80 40       	sbci	r24, 0x00	; 0
 8d4:	e1 f7       	brne	.-8      	; 0x8ce <regroup+0x24>
 8d6:	00 c0       	rjmp	.+0      	; 0x8d8 <regroup+0x2e>
 8d8:	00 00       	nop
	_delay_ms(190);
	siste = PIND&(1<<UART_TX);
 8da:	89 b1       	in	r24, 0x09	; 9
 8dc:	82 70       	andi	r24, 0x02	; 2
 8de:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	UCSR0B |= (1<<RXEN0) | (1<<TXEN0);   /* Enable RX and TX */
 8e2:	80 81       	ld	r24, Z
 8e4:	88 61       	ori	r24, 0x18	; 24
 8e6:	80 83       	st	Z, r24
	sei();
 8e8:	78 94       	sei
 8ea:	08 95       	ret

000008ec <motta>:
}

uint8_t motta(void) {
	while(hode == hale){}
 8ec:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <hode>
 8f0:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <hode+0x1>
 8f4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 8f8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 8fc:	28 17       	cp	r18, r24
 8fe:	39 07       	cpc	r19, r25
 900:	a9 f3       	breq	.-22     	; 0x8ec <motta>
	uint8_t returverdi = serialbuffer[hale++];
 902:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 906:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 90a:	9c 01       	movw	r18, r24
 90c:	2f 5f       	subi	r18, 0xFF	; 255
 90e:	3f 4f       	sbci	r19, 0xFF	; 255
 910:	30 93 03 01 	sts	0x0103, r19	; 0x800103 <__data_end+0x1>
 914:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <__data_end>
 918:	fc 01       	movw	r30, r24
 91a:	e0 59       	subi	r30, 0x90	; 144
 91c:	fe 4f       	sbci	r31, 0xFE	; 254
 91e:	e0 81       	ld	r30, Z
	hale = hale%BUFFERLENGDE;
 920:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__data_end>
 924:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__data_end+0x1>
 928:	9a 01       	movw	r18, r20
 92a:	36 95       	lsr	r19
 92c:	27 95       	ror	r18
 92e:	36 95       	lsr	r19
 930:	27 95       	ror	r18
 932:	a5 ec       	ldi	r26, 0xC5	; 197
 934:	b0 e2       	ldi	r27, 0x20	; 32
 936:	0e 94 bb 04 	call	0x976	; 0x976 <__umulhisi3>
 93a:	92 95       	swap	r25
 93c:	82 95       	swap	r24
 93e:	8f 70       	andi	r24, 0x0F	; 15
 940:	89 27       	eor	r24, r25
 942:	9f 70       	andi	r25, 0x0F	; 15
 944:	89 27       	eor	r24, r25
 946:	64 ef       	ldi	r22, 0xF4	; 244
 948:	71 e0       	ldi	r23, 0x01	; 1
 94a:	86 9f       	mul	r24, r22
 94c:	90 01       	movw	r18, r0
 94e:	87 9f       	mul	r24, r23
 950:	30 0d       	add	r19, r0
 952:	96 9f       	mul	r25, r22
 954:	30 0d       	add	r19, r0
 956:	11 24       	eor	r1, r1
 958:	ca 01       	movw	r24, r20
 95a:	82 1b       	sub	r24, r18
 95c:	93 0b       	sbc	r25, r19
 95e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 962:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	return returverdi;
}
 966:	8e 2f       	mov	r24, r30
 968:	08 95       	ret

0000096a <__tablejump2__>:
 96a:	ee 0f       	add	r30, r30
 96c:	ff 1f       	adc	r31, r31
 96e:	05 90       	lpm	r0, Z+
 970:	f4 91       	lpm	r31, Z
 972:	e0 2d       	mov	r30, r0
 974:	09 94       	ijmp

00000976 <__umulhisi3>:
 976:	a2 9f       	mul	r26, r18
 978:	b0 01       	movw	r22, r0
 97a:	b3 9f       	mul	r27, r19
 97c:	c0 01       	movw	r24, r0
 97e:	a3 9f       	mul	r26, r19
 980:	70 0d       	add	r23, r0
 982:	81 1d       	adc	r24, r1
 984:	11 24       	eor	r1, r1
 986:	91 1d       	adc	r25, r1
 988:	b2 9f       	mul	r27, r18
 98a:	70 0d       	add	r23, r0
 98c:	81 1d       	adc	r24, r1
 98e:	11 24       	eor	r1, r1
 990:	91 1d       	adc	r25, r1
 992:	08 95       	ret

00000994 <_exit>:
 994:	f8 94       	cli

00000996 <__stop_program>:
 996:	ff cf       	rjmp	.-2      	; 0x996 <__stop_program>
